{"version":3,"sources":["actions/action-types.ts","const.ts","reducer/index.ts","store/index.tsx","utility.ts","components/ErrorBoundary.tsx","services.tsx","actions/index.ts","components/Anchor.tsx","components/Layout/GridLayout.tsx","components/User.tsx","components/Repository.tsx","pages/GithubSearch/GithubResultDisplay.tsx","pages/GithubSearch/GithubHeader.tsx","pages/GithubSearch/GithubSearchInput.tsx","pages/GithubSearch/GithubSearch.tsx","pages/NotFound/NotFound.tsx","pages/Error/Error.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SEARCH_USERS_LOADING","SEARCH_USERS_DATA_SUCCESS","SEARCH_USERS_DATA_ERROR","SEARCH_REPO_LOADING","SEARCH_REPO_DATA_SUCCESS","SEARCH_REPO_DATA_ERROR","SUPPORTED_ENTITIES","API_SEARCH_KEYS","USERS","REPO","initialState","users","repos","isLoading","errorMessage","page","appendToState","persistConfig","key","storage","persistReducer","state","action","payload","type","query","items","undefined","updatedStateUsers","existingState","delve","updatedStateRepos","storeEnhancers","compose","store","createStore","rootReducer","applyMiddleware","thunk","persistor","persistStore","logger","console","log","ErrorBoundary","hasError","error","this","href","process","props","children","Component","axiosInstance","axios","create","baseURL","timeout","headers","interceptors","request","use","config","data","humps","decamelizeKeys","response","camelizeKeys","status","message","Promise","reject","search","entity","a","method","url","initialPayload","Anchor","rel","target","gridLayoutClass","css","GridContainer","styled","Flex","Image","User","user","alt","src","avatarUrl","flexDirection","pl","login","htmlUrl","Repository","repository","fullName","description","stargazersCount","forks","openIssues","language","GithubResultDisplay","onLoadMore","userList","repoList","resultLength","length","className","height","dataLength","next","hasMore","loader","map","id","repo","Heading","SubHeading","GithubHeader","alignItems","SearchInput","Dropdown","GithubSearchInput","selectedEntity","onInputChange","onEntityChange","mt","element","minLength","debounceTimeout","placeholder","onChange","width","value","SearchContainer","hasInputValue","Search","Error","corner","GithubSearchConnected","connect","dispatch","searchUsers","term","getState","cachedItems","cachedPage","searchNextUsers","newPage","searchRepo","searchNextRepos","useState","setSelectedEntity","setQuery","useEffect","e","to","NotFound","TypeError","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SACMA,EAAuB,uBACvBC,EAA4B,4BAC5BC,EAA0B,0BAC1BC,EAAsB,sBACtBC,EAA2B,2BAC3BC,EAAyB,yBCNzBC,EACG,QADHA,EAEE,OAGFC,EAA6C,CACjDC,MAAO,QACPC,KAAM,gBCkBKC,EAAe,CAC1BC,MAAO,GACPC,MAAO,GACPC,WAAW,EACXC,aAAc,GACdC,KDpBwB,ECqBxBC,eAAe,GAyFXC,EAAgB,CACpBC,IAAK,OACLC,aAGaC,cAAeH,GA3FV,SAACI,EAA2BC,GAAuB,IAC7DC,EAAkBD,EAAlBC,QAASC,EAASF,EAATE,KADmD,EAERD,GAAW,GAA/DE,EAF4D,EAE5DA,MAAOC,EAFqD,EAErDA,MAAOX,EAF8C,EAE9CA,KAAMC,EAFwC,EAExCA,cAAeF,EAFyB,EAEzBA,aAC3C,QAAca,IAAVN,EACF,OAAOX,EAGT,OAAQc,GACN,KAAKxB,EACH,OAAO,2BACFqB,GADL,IAEER,WAAW,EACXC,aAAc,KAGlB,KAAKb,EACH,IAAI2B,EAAiB,eAAOP,EAAMV,OAElC,GAAIK,EAAe,CACjB,IAAMa,EAAgBC,IAAMT,EAAD,gBAAiBI,EAAjB,UAAgC,IAC3DG,EAAiB,2BACZA,GADY,eAGZH,EAAQ,CACPC,MAAM,GAAD,mBAAMG,GAAN,YAAwBH,IAC7BX,UAMR,OAAO,2BACFM,GADL,IAEEV,MAAOiB,EACPf,WAAW,EACXC,aAAc,KAGlB,KAAKZ,EACH,OAAO,2BACFmB,GADL,IAEER,WAAW,EACXC,iBAGJ,KAAKX,EACH,OAAO,2BACFkB,GADL,IAEER,WAAW,EACXC,aAAc,KAGlB,KAAKV,EACH,IAAI2B,EAAiB,eAAOV,EAAMT,OAElC,GAAII,EAAe,CACjB,IAAMa,EAAgBC,IAAMT,EAAD,gBAAiBI,EAAjB,UAAgC,IAC3DM,EAAiB,2BACZA,GADY,eAGZN,EAAQ,CACPC,MAAM,GAAD,mBAAMG,GAAN,YAAwBH,IAC7BX,UAKR,OAAO,2BACFM,GADL,IAEET,MAAOmB,EACPlB,WAAW,EACXC,aAAc,KAGlB,KAAKT,EACH,OAAO,2BACFgB,GADL,IAEER,WAAW,EACXC,iBAGJ,QACE,OAAOJ,MC9GPsB,EAAiBC,IACjBC,EAAQC,YACZC,EACAJ,EAAeK,YAAgBC,OAGpBC,EAAYC,YAAaN,GAEvBA,I,gCCdTO,EACC,WAAwB,IAAD,GAG1B,EAAAC,SAAQC,IAAR,oB,OC6BWC,E,4MA1BbvB,MAAe,CACbwB,UAAU,G,uDAOZ,SAAkBC,GAChBL,EAAWK,K,oBAGb,WACE,OAAIC,KAAK1B,MAAMwB,SACN,eAAC,WAAD,WACL,iIACA,uBACA,uBACA,uBAJK,SAKC,mBAAGG,KAAMC,IAAT,kBALD,kBAQFF,KAAKG,MAAMC,Y,uCAlBpB,WACE,MAAO,CAAEN,UAAU,O,GANKO,a,mGCAtBC,GAAgBC,IAAMC,OAAO,CACjCC,QLIe,gCKHfC,QAAS,IACTC,QAAS,CACP,eAAgB,sBAIpBL,GAAcM,aAAaC,QAAQC,KAAI,SAAAC,GAIrC,OAHIA,EAAOC,OACTD,EAAOC,KAAOC,KAAMC,eAAeH,EAAOC,OAErCD,KAGTT,GAAcM,aAAaO,SAASL,KAAI,SAAAK,GAEtC,OADAA,EAASH,KAAOC,KAAMG,aAAaD,EAASH,MACrCG,KACN,SAACpB,GAAW,IACHoB,EAAapB,EAAboB,SAKV,OAJEzB,EAAW,UAAW,CACpB2B,OAAQF,EAASE,OACjBC,QAASH,EAASH,KAAKM,UAEpBC,QAAQC,OAAOL,EAASH,KAAKM,YAGtC,I,oCAAMG,GAAM,uCAAG,WAAO/C,EAAegD,EAAgB1D,GAAtC,eAAA2D,EAAA,+EAEYrB,GAAc,CACnCsB,OAAQ,MACRC,IAAI,GAAD,OAAKrE,EAAgBkE,GAArB,4BAAgD1D,EAAhD,cAA0DU,KAJpD,cAELyC,EAFK,yBAOJA,GAPI,oGAAH,0DCjBV1D,GAEEF,EADFG,GACEH,EAEEuE,GAAiB,CACrBhE,WAAW,EACXE,KNZwB,EMaxBC,eAAe,EACfF,aAAc,GACdW,MAAO,GACPC,MAAO,I,SCdMoD,GAXA,SAAC5B,GAGT,IACGF,EAAmBE,EAAnBF,KAAMG,EAAaD,EAAbC,SAEd,OAAO,mBAAGH,KAAMA,EAAM+B,IAAI,sBAAsBC,OAAO,SAAhD,SACJ7B,KCJC8B,GAAkBC,YAAH,0OAYfC,GAAgBC,kBAAOC,IAAPD,CAAH,oNCTbE,GAAQF,kBAAO,MAAPA,CAAH,iHA8BIG,GAvBF,SAACrC,GAA4B,IAChCsC,EAAStC,EAATsC,KAER,OACE,eAACL,GAAD,WACE,cAACG,GAAD,CAAOG,IAAI,cAAcC,IAAKF,EAAKG,YACnC,eAAC,IAAD,CAAMC,cAAc,SAASC,GAAI,EAAjC,UACE,eAAC,IAAD,WACE,uCAAcL,EAAKM,MADrB,IAC4B,uBAC1B,4CAFF,IAEqB,cAAC,GAAD,CAAQ9C,KAAI,6BAAwBwC,EAAKM,MAA7B,kBAAZ,kBAA6E,uBAChG,wCAHF,IAGiB,cAAC,GAAD,CAAQ9C,KAAI,6BAAwBwC,EAAKM,MAA7B,qBAAZ,kBAAgF,uBAAK,0BAEtG,eAAC,IAAD,oBACQ,cAAC,GAAD,CAAQ9C,KAAMwC,EAAKO,QAAnB,kBADR,8BAGA,eAAC,IAAD,wBACY,cAAC,GAAD,CAAQ/C,KAAMwC,EAAKZ,IAAnB,kBADZ,oCCMOoB,GA9BI,SAAC9C,GAAwC,IAAD,EASnDA,EARE+C,WACNC,EAFuD,EAEvDA,SACAH,EAHuD,EAGvDA,QACAI,EAJuD,EAIvDA,YACAC,EALuD,EAKvDA,gBACAC,EANuD,EAMvDA,MACAC,EAPuD,EAOvDA,WACAC,EARuD,EAQvDA,SAGF,OACE,cAACpB,GAAD,UACE,eAAC,IAAD,CAAMS,cAAc,SAASC,GAAI,EAAjC,UACE,eAAC,IAAD,WACE,2CADF,IACqBK,EADrB,IAC+B,uBAC7B,6CAFF,IAEuBC,EAFvB,IAEoC,uBAClC,0CAHF,IAGoBI,EAHpB,IAG8B,uBAAK,0BAEnC,eAAC,IAAD,2BACMH,EADN,wBAC6BC,EAD7B,wBAC0CC,EAD1C,IACsD,uBAAK,0BAE3D,eAAC,IAAD,oBACQ,mBAAGtD,KAAM+C,EAASf,OAAO,SAASD,IAAI,sBAAtC,kBADR,0BCfNvE,GAEEF,EADFG,GACEH,EAyCWkG,GA/Ba,SAAC,GAMK,IALhC/B,EAK+B,EAL/BA,OACAgC,EAI+B,EAJ/BA,WACAC,EAG+B,EAH/BA,SACAC,EAE+B,EAF/BA,SACA9F,EAC+B,EAD/BA,UAEM+F,EAAenC,IAAWjE,GAAQkG,EAASG,OAASF,EAASE,OAEnE,OAAKhG,GAA8B,IAAjB+F,EAKhB,eAAC,KAAD,CACEE,UAAW7B,GACX8B,OAAQ,IACRC,WAAYJ,EACZK,KAAMR,EACNS,SAAS,EACTC,OAAQ,4CAAS,GANnB,UASI1C,IAAWjE,IAASkG,EAASU,KAAI,SAAC5B,GAAD,OAAiB,cAAC,GAAD,CAAoBA,KAAMA,GAAfA,EAAK6B,OAGlE5C,IAAWhE,IAAQkG,EAASS,KAAI,SAACE,GAAD,OAAuB,cAAC,GAAD,CAA0BrB,WAAYqB,GAArBA,EAAKD,UAhB1E,gEC9BLE,GAAUnC,kBAAO,KAAPA,CAAH,4CAIPoC,GAAapC,kBAAO,OAAPA,CAAH,0FAMVE,GAAQF,kBAAO,MAAPA,CAAH,+DAmBIqC,GAdM,kBACnB,eAAC,IAAD,CAAMC,WAAW,SAAjB,UACE,cAAC,GAAD,CACEjC,IAAI,cACJC,IAAI,wBACN,eAAC,IAAD,CAAKG,GAAI,EAAT,UACE,cAAC0B,GAAD,8BACA,cAACC,GAAD,wD,SClBJhH,GAEEF,EADFG,GACEH,EAEEqH,GAA6BvC,kBAAO,QAAPA,CAAH,uKAS1BwC,GAAWxC,kBAAO,SAAPA,CAAH,wIAwCCyC,GA1BW,SAAC3E,GAAoC,IACrD4E,EAAkD5E,EAAlD4E,eAAgBC,EAAkC7E,EAAlC6E,cAAeC,EAAmB9E,EAAnB8E,eAEvC,OACE,cAAC,IAAD,CAAMC,GAAI,EAAGrC,cAAc,SAA3B,SACE,eAAC,IAAD,CAAM8B,WAAW,SAAjB,UACE,cAAC,iBAAD,CACEQ,QAASP,GACTQ,UAAW,EACXC,gBAAiB,IACjBC,YAAY,4BACZC,SAAUP,IAEZ,cAAC,IAAD,CAAKlC,GAAI,EAAG0C,MAAM,MAAlB,SACE,eAACX,GAAD,CACEY,MAAOV,EACPQ,SAAUN,EAFZ,UAGE,wBAAQQ,MAAOhI,GAAf,mBACA,wBAAQgI,MAAO/H,GAAf,6BC/BVD,GAEEF,EADFG,GACEH,EA6BEmI,GAAkBrD,kBAAOC,IAAPD,CAAH,uEAEA,SAAAlC,GAAK,OAAIA,EAAMwF,cAAgB,UAAY,YAG1DC,GAASvD,kBAAOC,IAAPD,CAAH,+CAINwD,GAAQxD,kBAAO,MAAPA,CAAH,mEAKLyD,GAAS3D,YAAH,sFAsHG4D,GADeC,aAFN,SAAC1H,GAAD,OAAgBA,KARb,SAAC2H,GAC1B,MAAO,CACLC,YAAa,SAACC,GAAD,OAAeF,GRnJXvH,EQmJgCyH,ERlJnD,uCAAO,WAAOF,EAA6BG,GAApC,yBAAAzE,EAAA,yDACCrD,EAAQ8H,IADT,EAEiDrH,IAAMT,EAAD,gBAAiBI,GAAS,IAFhF,IAEGC,MAAO0H,OAFV,MAEwB,GAFxB,EAEkCC,EAFlC,EAE4BtI,OAE7BqI,EAAYvC,OAAS,GAJpB,gBAKHmC,EAAS,CACPxH,KAAMvB,EACNsB,QAAS,CACPG,MAAO0H,EACPrI,KAAMsI,EACN5H,QACAT,eAAe,EACfF,aAAc,GACdD,WAAW,KAbZ,8BAiBHmI,EAAS,CACPxH,KAAMxB,EAAsBuB,QAAQ,2BAC/BsD,IAD8B,IAEjChE,WAAW,MApBZ,mBAuBsB2D,GAAO/C,EAAOjB,GN3CnB,GMoBjB,QAuBK0D,EAvBL,OAwBD8E,EAAS,CACPxH,KAAMvB,EACNsB,QAAQ,2BACHsD,IADE,IAELnD,MAAOwC,EAASH,KAAKrC,MACrBX,KNjDc,EMkDdU,QACAT,eAAe,MA/BlB,kDAmCDgI,EAAS,CACPxH,KAAMtB,EAAyBqB,QAAQ,2BAClCsD,IADiC,IAEpC/D,aAAY,SAtCf,0DAAP,0DADkB,IAACW,GQoJjB6H,gBAAiB,SAAC7H,GAAD,OAAmBuH,ERtGhB,SAACvH,GACvB,8CAAO,WAAOuH,EAA6BG,GAApC,qBAAAzE,EAAA,6DACLsE,EAAS,CACPxH,KAAMxB,EAAsBuB,QAAQ,2BAC/BsD,IAD8B,IAEjChE,WAAW,MAJV,EAMYiB,IAAMqH,IAAD,gBAAsB1H,GAAS,IAA7CV,EANH,EAMGA,KACFwI,EAAUxI,EAAO,EAPlB,kBAUoByD,GAAO/C,EAAOjB,GAAO+I,GAVzC,OAUGrF,EAVH,OAWH8E,EAAS,CACPxH,KAAMvB,EACNsB,QAAQ,2BACHsD,IADE,IAELnD,MAAOwC,EAASH,KAAKrC,MACrBX,KAAMwI,EACN9H,QACAT,eAAe,MAlBhB,kDAsBHgI,EAAS,CACPxH,KAAMtB,EAAyBqB,QAAQ,2BAClCsD,IADiC,IAEpC/D,aAAY,SAzBb,0DAAP,wDQqG+CwI,CAAgB7H,KAC7D+H,WAAY,SAACN,GAAD,OAAeF,GRvEXvH,EQuE+ByH,ERtEjD,uCAAO,WAAOF,EAA6BG,GAApC,yBAAAzE,EAAA,yDACCrD,EAAQ8H,IADT,EAEiDrH,IAAMT,EAAD,gBAAiBI,GAAS,IAFhF,IAEGC,MAAO0H,OAFV,MAEwB,GAFxB,EAEkCC,EAFlC,EAE4BtI,OAE7BqI,EAAYvC,OAAS,GAJpB,gBAKHmC,EAAS,CACPxH,KAAMpB,EACNmB,QAAQ,2BACHsD,IADE,IAELnD,MAAO0H,EACPrI,KAAMsI,EACN5H,QACAT,eAAe,MAZhB,8BAgBHgI,EAAS,CACPxH,KAAMrB,EAAqBoB,QAAQ,2BAC9BsD,IAD6B,IAEhChE,WAAW,MAnBZ,mBAsBsB2D,GAAO/C,EAAOhB,GNxHnB,GMkGjB,QAsBKyD,EAtBL,OAuBD8E,EAAS,CACPxH,KAAMpB,EACNmB,QAAQ,2BACHsD,IADE,IAELnD,MAAOwC,EAASH,KAAKrC,MACrBX,KN9Hc,EM+HdU,QACAT,eAAe,MA9BlB,kDAkCDgI,EAAS,CACPxH,KAAMnB,EAAwBkB,QAAQ,2BACjCsD,IADgC,IAEnC/D,aAAY,SArCf,0DAAP,0DADiB,IAACW,GQwEhBgI,gBAAiB,SAAChI,GAAD,OAAmBuH,ER1BhB,SAACvH,GACvB,8CAAO,WAAOuH,EAA6BG,GAApC,qBAAAzE,EAAA,6DACLsE,EAAS,CACPxH,KAAMrB,EAAqBoB,QAAQ,2BAC9BsD,IAD6B,IAEhChE,WAAW,MAJV,EAQYiB,IAAMqH,IAAD,gBAAsB1H,GAAS,IAA7CV,EARH,EAQGA,KACFwI,EAAUxI,EAAO,EATlB,kBAYoByD,GAAO/C,EAAOhB,GAAM8I,GAZxC,OAYGrF,EAZH,OAaH8E,EAAS,CACPxH,KAAMpB,EACNmB,QAAQ,2BACHsD,IADE,IAELnD,MAAOwC,EAASH,KAAKrC,MACrBX,KAAMwI,EACN9H,QACAT,eAAe,MApBhB,kDAwBHgI,EAAS,CACPxH,KAAMnB,EAAwBkB,QAAQ,2BACjCsD,IADgC,IAEnC/D,aAAY,SA3Bb,0DAAP,wDQyB+C2I,CAAgBhI,QAKnCsH,EA/GT,SAAC7F,GAA+B,IAAD,EAU9CA,EARFvC,aAFgD,MAExC,GAFwC,IAU9CuC,EAPFtC,aAHgD,MAGxC,GAHwC,IAU9CsC,EANF+F,mBAJgD,MAIlC,aAJkC,IAU9C/F,EALFoG,uBALgD,MAK9B,aAL8B,IAU9CpG,EAJFsG,kBANgD,MAMnC,aANmC,IAU9CtG,EAHFuG,uBAPgD,MAO9B,aAP8B,IAU9CvG,EAFFpC,oBARgD,MAQjC,GARiC,IAU9CoC,EADFrC,iBATgD,WAYN6I,mBAAiBlJ,IAZX,mBAY3CsH,EAZ2C,KAY3B6B,EAZ2B,OAaxBD,mBAAiB,IAbO,mBAa3CjI,EAb2C,KAapCmI,EAboC,KAe5ClD,EAAW5E,IAAMnB,EAAD,UAAWc,EAAX,UAA0B,IAC1CkF,EAAW7E,IAAMlB,EAAD,UAAWa,EAAX,UAA0B,IAGhDoI,qBAAU,WACR,GAAKpI,EAAL,CAKMqG,IAAmBtH,GACrByI,EAAYxH,GACHqG,IAAmBrH,IAC5B+I,EAAW/H,MAId,CAACqG,EAAgBrG,IAwBpB,OACE,eAACgH,GAAD,CACE7C,cAAc,SACd8C,cAAgC,IAAjBjH,EAAMoF,OAFvB,UAGE,eAAC8B,GAAD,CAAQ/C,cAAc,SAAtB,UACE,cAAC,GAAD,IACA,cAAC,GAAD,CACEkC,eAAgBA,EAChBC,cA9BkB,SAAC+B,GACzB,IAAMrI,EAAQqI,EAAE9E,OAAOwD,MAKvBoB,EAJKnI,GACM,KA4BLuG,eAtBmB,SAAC8B,GAC1B,IAAMrF,EAASqF,EAAE9E,OAAOwD,MACxBmB,EAAkBlF,SAwBd5D,GACsB,IAApB6F,EAASG,QAAoC,IAApBF,EAASE,QAClC,8CAIFpF,IACCX,GACD,cAAC,IAAD,CAAMmH,GAAI,EAAV,SACE,cAAC,GAAD,CACEpH,UAAWA,EACX4D,OAAQqD,EACRrB,WAjCiB,WACrBqB,IAAmBtH,GACrB8I,EAAgB7H,GACPqG,IAAmBrH,IAC5BgJ,EAAgBhI,IA8BViF,SAAUA,EACVC,SAAUA,MAIdlF,GACAX,GACA,cAAC,IAAD,CAAMmH,GAAI,EAAV,SACE,cAACW,GAAD,UACG9H,MAIP,cAAC,IAAD,CAAMiJ,GAAG,gBAAMjD,UAAW+B,GAA1B,gCC/JSmB,GAPE,WACf,OAAO,iEAEC,cAAC,IAAD,CAAMD,GAAG,iBAAT,kBAFD,8BCCMnB,GAJD,WACZ,MAAM,IAAIqB,UAAU,eCoCPC,OAxBf,WACE,OACE,cAAC,EAAD,UACE,cAAC,IAAD,CAAUhI,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAaK,UAAWA,EAAxB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4H,OAAK,EAACC,KAAK,iBAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,gBAAlB,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,GAAD,kBCbDC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4b841b82.chunk.js","sourcesContent":["\nconst SEARCH_USERS_LOADING = 'SEARCH_USERS_LOADING'\nconst SEARCH_USERS_DATA_SUCCESS = 'SEARCH_USERS_DATA_SUCCESS'\nconst SEARCH_USERS_DATA_ERROR = 'SEARCH_USERS_DATA_ERROR'\nconst SEARCH_REPO_LOADING = 'SEARCH_REPO_LOADING'\nconst SEARCH_REPO_DATA_SUCCESS = 'SEARCH_REPO_DATA_SUCCESS'\nconst SEARCH_REPO_DATA_ERROR = 'SEARCH_REPO_DATA_ERROR'\n\nexport {\n  SEARCH_USERS_LOADING,\n  SEARCH_USERS_DATA_SUCCESS,\n  SEARCH_USERS_DATA_ERROR,\n  SEARCH_REPO_LOADING,\n  SEARCH_REPO_DATA_SUCCESS,\n  SEARCH_REPO_DATA_ERROR\n}","const SUPPORTED_ENTITIES: { [key: string]: string } = {\n  USERS: 'USERS',\n  REPO: 'REPO'\n}\n\nconst API_SEARCH_KEYS: { [key: string]: string } = {\n  USERS: 'users',\n  REPO: 'repositories'\n}\n\nconst FIRST_PAGE_NUMBER = 1;\nconst BASE_URL = 'https://api.github.com/search';\n\nexport {\n  SUPPORTED_ENTITIES,\n  API_SEARCH_KEYS,\n  FIRST_PAGE_NUMBER,\n  BASE_URL\n}","import { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'\nimport delve from 'dlv';\n\nimport {\n  SEARCH_USERS_LOADING,\n  SEARCH_USERS_DATA_SUCCESS,\n  SEARCH_USERS_DATA_ERROR,\n  SEARCH_REPO_LOADING,\n  SEARCH_REPO_DATA_SUCCESS,\n  SEARCH_REPO_DATA_ERROR\n} from '../actions/action-types';\nimport { FIRST_PAGE_NUMBER } from '../const';\nimport { IGenericResults } from '../pages/GithubSearch/GithubSearcher.interfaces';\nimport { AnyAction } from 'redux';\n\ninterface IState {\n  users: IGenericResults;\n  repos: IGenericResults;\n  isLoading: boolean;\n  errorMessage: string;\n  page: number;\n  appendToState: boolean;\n}\n\nexport const initialState = {\n  users: {} as IGenericResults,\n  repos: {} as IGenericResults,\n  isLoading: false,\n  errorMessage: '',\n  page: FIRST_PAGE_NUMBER,\n  appendToState: false\n}\n\nconst rootReducer = (state: IState | undefined, action: AnyAction) => {\n  const { payload, type } = action\n  const { query, items, page, appendToState, errorMessage } = payload || {}\n  if (state === undefined) {\n    return initialState;\n  }\n\n  switch (type) {\n    case SEARCH_USERS_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        errorMessage: ''\n      }\n\n    case SEARCH_USERS_DATA_SUCCESS:\n      let updatedStateUsers = {...state.users};\n\n      if (appendToState) {\n        const existingState = delve(state, `users.${query}.items`, []);\n        updatedStateUsers = {\n          ...updatedStateUsers,\n          ...{\n            [query]: {\n              items: [...existingState, ...items],\n              page\n            }\n          }\n        }\n      }\n\n      return {\n        ...state,\n        users: updatedStateUsers,\n        isLoading: false,\n        errorMessage: ''\n      }\n\n    case SEARCH_USERS_DATA_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        errorMessage\n      }\n\n    case SEARCH_REPO_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        errorMessage: ''\n      }\n\n    case SEARCH_REPO_DATA_SUCCESS:\n      let updatedStateRepos = {...state.repos};\n\n      if (appendToState) {\n        const existingState = delve(state, `repos.${query}.items`, []);\n        updatedStateRepos = {\n          ...updatedStateRepos,\n          ...{\n            [query]: {\n              items: [...existingState, ...items],\n              page\n            }\n          }\n        }\n      }\n      return {\n        ...state,\n        repos: updatedStateRepos,\n        isLoading: false,\n        errorMessage: ''\n      }\n\n    case SEARCH_REPO_DATA_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        errorMessage\n      }\n\n    default:\n      return initialState;\n  }\n}\n\nconst persistConfig = {\n  key: 'root',\n  storage\n}\n\nexport default persistReducer(persistConfig, rootReducer);","import { createStore, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { persistStore } from 'redux-persist'\n\nimport rootReducer from '../reducer'\n\nconst storeEnhancers = compose\nconst store = createStore(\n  rootReducer,\n  storeEnhancers(applyMiddleware(thunk))\n)\n\nexport const persistor = persistStore(store);\n\nexport default store","const logger = {\n  log: (...message: any[]) => {\n    // call to any logger service like Sentry, LogRocket to log the error \n    // some message contains IP address, which has to be redact before sending\n    console.log(...message);\n  },\n}\n\nexport {\n  logger\n}","import React, { Component, Fragment } from 'react';\nimport { logger } from '../utility';\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component {\n  state: State = {\n    hasError: false\n  };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error) {\n    logger.log(error);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <Fragment>\n        <h2>This is how you can handle global errors inside you app! Now next time don't click 💣</h2>\n        <br/>\n        <br/>\n        <br />\n        Click <a href={process.env.PUBLIC_URL}>here</a> to go back!\n      </Fragment>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import axios from 'axios'\nimport humps from 'humps'\n\nimport { API_SEARCH_KEYS, BASE_URL } from './const'\nimport { logger } from './utility';\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000,\n  headers: {\n    'content-type': 'application/json',\n  }\n})\n\naxiosInstance.interceptors.request.use(config => {\n  if (config.data) {\n    config.data = humps.decamelizeKeys(config.data)\n  }\n  return config\n})\n\naxiosInstance.interceptors.response.use(response => {\n  response.data = humps.camelizeKeys(response.data)\n  return response\n}, (error) => {\n    const { response } = error;\n    logger.log('Error :', {\n      status: response.status,\n      message: response.data.message\n    })\n  return Promise.reject(response.data.message);\n})\n\nconst search = async (query: string, entity: string, page: number) => {\n  try {\n    const response = await axiosInstance({\n      method: 'get',\n      url: `${API_SEARCH_KEYS[entity]}?per_page=9&page=${page}&q=${query}`\n    })\n\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport {\n  search\n}","import delve from 'dlv';\nimport { Dispatch } from 'redux';\n\nimport { FIRST_PAGE_NUMBER, SUPPORTED_ENTITIES } from '../const';\nimport { IAction } from '../pages/GithubSearch/GithubSearcher.interfaces';\nimport { search } from '../services';\nimport {\n  SEARCH_USERS_LOADING,\n  SEARCH_USERS_DATA_SUCCESS,\n  SEARCH_USERS_DATA_ERROR,\n  SEARCH_REPO_LOADING,\n  SEARCH_REPO_DATA_SUCCESS,\n  SEARCH_REPO_DATA_ERROR\n} from './action-types'\n\nconst {\n  USERS,\n  REPO\n} = SUPPORTED_ENTITIES;\n\nconst initialPayload = {\n  isLoading: false,\n  page: FIRST_PAGE_NUMBER,\n  appendToState: false,\n  errorMessage: '',\n  query: '',\n  items: []\n}\n\nconst searchUsers = (query: string) => {\n  return async (dispatch: Dispatch<IAction>, getState: Function) => {\n    const state = getState()\n    const { items: cachedItems = [], page: cachedPage } = delve(state, `users.${query}`, {})\n\n    if (cachedItems.length > 0) {\n      dispatch({\n        type: SEARCH_USERS_DATA_SUCCESS,\n        payload: {\n          items: cachedItems,\n          page: cachedPage,\n          query,\n          appendToState: false,\n          errorMessage: '',\n          isLoading: false\n        }\n      });\n    } else {\n      dispatch({\n        type: SEARCH_USERS_LOADING, payload: {\n          ...initialPayload,\n          isLoading: true\n      } });\n      try {\n        const response = await search(query, USERS, FIRST_PAGE_NUMBER)\n        dispatch({\n          type: SEARCH_USERS_DATA_SUCCESS,\n          payload: {\n            ...initialPayload,\n            items: response.data.items,\n            page: FIRST_PAGE_NUMBER,\n            query,\n            appendToState: true\n          }\n        });\n      } catch (errorMessage) {\n        dispatch({\n          type: SEARCH_USERS_DATA_ERROR, payload: {\n            ...initialPayload,\n            errorMessage\n        } });\n      }\n    }\n  };\n}\n\nconst searchNextUsers = (query: string) => {\n  return async (dispatch: Dispatch<IAction>, getState: Function) => {\n    dispatch({\n      type: SEARCH_USERS_LOADING, payload: {\n        ...initialPayload,\n        isLoading: true\n    } })\n    const { page } = delve(getState(), `users.${query}`, {})\n    const newPage = page + 1\n\n    try {\n      const response = await search(query, USERS, newPage)\n      dispatch({\n        type: SEARCH_USERS_DATA_SUCCESS,\n        payload: {\n          ...initialPayload,\n          items: response.data.items,\n          page: newPage,\n          query,\n          appendToState: true\n        }\n      });\n    } catch (errorMessage) {\n      dispatch({\n        type: SEARCH_USERS_DATA_ERROR, payload: {\n          ...initialPayload,\n          errorMessage\n      } });\n    }\n  };\n}\n\nconst searchRepo = (query: string) => {\n  return async (dispatch: Dispatch<IAction>, getState: Function) => {\n    const state = getState()\n    const { items: cachedItems = [], page: cachedPage } = delve(state, `repos.${query}`, {})\n\n    if (cachedItems.length > 0) {\n      dispatch({\n        type: SEARCH_REPO_DATA_SUCCESS,\n        payload: {\n          ...initialPayload,\n          items: cachedItems,\n          page: cachedPage,\n          query,\n          appendToState: false\n        }\n      });\n    } else {\n      dispatch({\n        type: SEARCH_REPO_LOADING, payload: {\n          ...initialPayload,\n          isLoading: true\n      } });\n      try {\n        const response = await search(query, REPO, FIRST_PAGE_NUMBER)\n        dispatch({\n          type: SEARCH_REPO_DATA_SUCCESS,\n          payload: {\n            ...initialPayload,\n            items: response.data.items,\n            page: FIRST_PAGE_NUMBER,\n            query,\n            appendToState: true\n          }\n        });\n      } catch (errorMessage) {\n        dispatch({\n          type: SEARCH_REPO_DATA_ERROR, payload: {\n            ...initialPayload,\n            errorMessage\n        } });\n      }\n    }\n  };\n}\n\n\nconst searchNextRepos = (query: string) => {\n  return async (dispatch: Dispatch<IAction>, getState: Function) => {\n    dispatch({\n      type: SEARCH_REPO_LOADING, payload: {\n        ...initialPayload,\n        isLoading: false\n      }\n    })\n    // could have delved page and initialized it to 0\n    const { page } = delve(getState(), `repos.${query}`, {})\n    const newPage = page + 1\n\n    try {\n      const response = await search(query, REPO, newPage)\n      dispatch({\n        type: SEARCH_REPO_DATA_SUCCESS,\n        payload: {\n          ...initialPayload,\n          items: response.data.items,\n          page: newPage,\n          query,\n          appendToState: true\n        }\n      });\n    } catch (errorMessage) {\n      dispatch({\n        type: SEARCH_REPO_DATA_ERROR, payload: {\n          ...initialPayload,\n          errorMessage\n      } });\n    }\n  };\n}\n\nexport {\n  searchUsers,\n  searchNextUsers,\n  searchRepo,\n  searchNextRepos\n}","\nconst Anchor = (props: {\n  children: string,\n  href: string,\n}) => {\n  const { href, children } = props;\n\n  return <a href={href} rel=\"noreferrer noopener\" target=\"_blank\">\n    {children}\n  </a>;\n}\n\nexport default Anchor","import styled from '@emotion/styled'\nimport { css } from '@emotion/css'\nimport { Flex } from 'rebass';\n\nconst gridLayoutClass = css`\n  overflow: auto;\n  display: grid;\n  grid-gap: 10px;\n  grid-template-columns: auto auto auto;\n  padding: 10px;\n\n  @media screen and (max-width: 768px) {\n    grid-template-columns: auto auto;\n  }\n`\n\nconst GridContainer = styled(Flex)`\n  border: 1px solid rgba(0, 0, 0, 0.8);\n  padding: 10px;\n  align-items: center;\n  border-radius: 3px;\n  transition: background 1s;\n\n  &:hover {\n    background: #ededed;\n  }\n`\n\nexport {\n  gridLayoutClass,\n  GridContainer\n}","import styled from '@emotion/styled'\nimport { Flex, Box } from 'rebass';\n\nimport { IUser } from '../pages/GithubSearch/GithubSearcher.interfaces';\nimport Anchor from './Anchor';\nimport { GridContainer } from './Layout/GridLayout';\n\nconst Image = styled('img')`\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  border: 1px solid gray;\n`\n\nconst User = (props: { user: IUser }) => {\n  const { user } = props;\n\n  return (\n    <GridContainer>\n      <Image alt=\"User Avatar\" src={user.avatarUrl} />\n      <Flex flexDirection=\"column\" pl={3}>\n        <Box>\n          <b>Name: </b>{user.login} <br/>\n          <b>Followers: </b> <Anchor href={`https://github.com/${user.login}?tab=followers`}>here</Anchor><br/>\n          <b>Repos: </b> <Anchor href={`https://github.com/${user.login}?tab=repositories`}>here</Anchor><br/><br/>\n        </Box>\n        <Box>\n          Click <Anchor href={user.htmlUrl}>here</Anchor> to go to user's profile\n        </Box>\n        <Box>\n          More info <Anchor href={user.url}>here</Anchor> for geeks 🤓\n        </Box>\n      </Flex>\n    </GridContainer>\n  )\n}\n\nexport default User","import { Flex, Box } from 'rebass';\n\nimport { IRepository } from '../pages/GithubSearch/GithubSearcher.interfaces';\nimport { GridContainer } from './Layout/GridLayout';\n\nconst Repository = (props: { repository: IRepository }) => {\n  const { repository: {\n    fullName,\n    htmlUrl,\n    description,\n    stargazersCount,\n    forks,\n    openIssues,\n    language,\n  } } = props;\n\n  return (\n    <GridContainer>\n      <Flex flexDirection=\"column\" pl={3}>\n        <Box>\n          <b>Repo Name:</b> {fullName} <br/>\n          <b>Description:</b> {description} <br/>\n          <b>Language:</b> {language} <br/><br/>\n        </Box>\n        <Box>\n          ⭐️ {stargazersCount} ⎪ 🍴 {forks} ⎪ 🐞 {openIssues} <br/><br/>\n        </Box>\n        <Box>\n          Click <a href={htmlUrl} target=\"_blank\" rel=\"noreferrer noopener\">here</a> to go to repo\n        </Box>\n      </Flex>\n    </GridContainer>\n  )\n}\n\nexport default Repository","import InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport { IUser, IRepository } from './GithubSearcher.interfaces';\nimport User from '../../components/User';\nimport Repository from '../../components/Repository';\n\nimport { SUPPORTED_ENTITIES } from '../../const';\nimport { gridLayoutClass } from '../../components/Layout';\n\ndeclare type Fn = () => any;\n\nconst {\n  USERS,\n  REPO\n} = SUPPORTED_ENTITIES\n\ninterface IGithubResultDisplayProps {\n  entity: string;\n  onLoadMore: Fn;\n  userList: IUser[];\n  repoList: IRepository[];\n  isLoading: boolean;\n}\n\nconst GithubResultDisplay = ({\n  entity,\n  onLoadMore,\n  userList,\n  repoList,\n  isLoading\n}: IGithubResultDisplayProps) => {\n  const resultLength = entity === USERS ? userList.length : repoList.length;\n\n  if (!isLoading && resultLength === 0) {\n    return <h3>No results found 🔍</h3>;\n  }\n\n  return (\n    <InfiniteScroll\n      className={gridLayoutClass}\n      height={400}\n      dataLength={resultLength}\n      next={onLoadMore}\n      hasMore={true}\n      loader={<h2 key={0}>Loading ...</h2>}\n    >\n      {\n        entity === USERS && userList.map((user: IUser) => <User key={user.id} user={user} />)\n      }\n      {\n        entity === REPO && repoList.map((repo: IRepository) => <Repository key={repo.id} repository={repo} />)\n      }\n    </InfiniteScroll>\n  )\n}\nexport default GithubResultDisplay","import React from 'react'\nimport { Flex, Box } from 'rebass'\nimport styled from '@emotion/styled'\n\nconst Heading = styled('h2')`\n  margin: 0;\n`\n\nconst SubHeading = styled('span')`\n  color: #878787;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst Image = styled('img')`\n  width: 50px;\n  height: 50px;\n`\n\nconst GithubHeader = () => (\n  <Flex alignItems=\"center\">\n    <Image\n      alt=\"Github Logo\"\n      src=\"./images/github.png\"/>\n    <Box pl={3}>\n      <Heading>GitHub Searcher</Heading>\n      <SubHeading>\n        Search users or repositories below\n      </SubHeading>\n    </Box>\n  </Flex>\n)\n\nexport default GithubHeader;","import { ComponentType, ChangeEventHandler } from 'react'\nimport { DebounceInput } from 'react-debounce-input'\nimport { Flex, Box } from 'rebass'\nimport styled from '@emotion/styled'\n\nimport { SUPPORTED_ENTITIES } from '../../const'\n\nconst {\n  USERS,\n  REPO\n} = SUPPORTED_ENTITIES\n\nconst SearchInput: ComponentType = styled('input')`\n  width: 80%;\n  height: 35px;\n  border-color: transparent;\n  padding: 0px 10px;\n  border: 1px solid #cccbcb;\n  border-radius: 3px;\n`\n\nconst Dropdown = styled('select')`\n  height: 37px;\n  border: 1px solid #cccbcb;\n  border-radius: 3px;\n  padding: 6px;\n  color: #757575;\n`\n\ninterface IGithubSearchInputProps {\n  selectedEntity: string;\n  onInputChange: ChangeEventHandler<HTMLInputElement>;\n  onEntityChange: ChangeEventHandler<HTMLSelectElement>;\n}\n\nconst GithubSearchInput = (props: IGithubSearchInputProps) => {\n  const { selectedEntity, onInputChange, onEntityChange } = props;\n\n  return (\n    <Flex mt={3} flexDirection=\"column\">\n      <Flex alignItems=\"center\">\n        <DebounceInput\n          element={SearchInput}\n          minLength={3}\n          debounceTimeout={500}\n          placeholder=\"Start typing to search...\"\n          onChange={onInputChange}\n        />\n        <Box pl={2} width=\"20%\">\n          <Dropdown\n            value={selectedEntity}\n            onChange={onEntityChange}>\n            <option value={USERS}>Users</option>\n            <option value={REPO}>Repo</option>\n          </Dropdown>\n        </Box>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default GithubSearchInput","import { useEffect, useState, ChangeEvent } from 'react'\nimport { connect } from 'react-redux'\nimport { Flex } from 'rebass'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/css';\nimport delve from 'dlv';\nimport { Link } from 'react-router-dom';\n\nimport { SUPPORTED_ENTITIES } from '../../const'\nimport {\n  searchUsers,\n  searchNextUsers,\n  searchRepo,\n  searchNextRepos\n} from '../../actions'\nimport { IUser, IRepository } from './GithubSearcher.interfaces'\nimport GithubResultDisplay from './GithubResultDisplay'\n\nimport GithubHeader from './GithubHeader';\nimport GithubSearchInput from './GithubSearchInput';\n\nconst {\n  USERS,\n  REPO\n} = SUPPORTED_ENTITIES\n\ninterface ISearchResultUsers {\n  [k: string]: {\n    items: IUser[];\n  }\n}\n\ninterface ISearchResultRepo {\n  [k: string]: {\n    items: IRepository[];\n  }\n}\n\ninterface IGithubSearchProps {\n  searchUsers?: Function;\n  searchNextUsers?: Function;\n  searchRepo?: Function;\n  searchNextRepos?: Function;\n  users?: ISearchResultUsers;\n  repos?: ISearchResultRepo;\n  isLoading?: boolean;\n  errorMessage?: string;\n}\n\ninterface ISearchContainerProps {\n  hasInputValue: boolean;\n}\n\nconst SearchContainer = styled(Flex)<ISearchContainerProps>`\n  height: 80vh;\n  justify-content: ${props => props.hasInputValue ? 'initial' : 'center'}\n`\n\nconst Search = styled(Flex)`\n  width: 450px;\n`;\n\nconst Error = styled('div')`\n  color: red;\n  font-weight: bold;\n`\n\nconst corner = css`\n  position: absolute;\n  right: 25px;\n  bottom: 25px;\n`;\n\nconst GithubSearch = (props: IGithubSearchProps) => {\n  const {\n    users = {},\n    repos = {},\n    searchUsers = () => {},\n    searchNextUsers = () => {},\n    searchRepo = () => {},\n    searchNextRepos = () => {},\n    errorMessage = '',\n    isLoading = false\n  } = props;\n\n  const [selectedEntity, setSelectedEntity] = useState<string>(USERS);\n  const [query, setQuery] = useState<string>('');\n\n  const userList = delve(users, `${query}.items`, []);\n  const repoList = delve(repos, `${query}.items`, []);\n\n  // call whenever the entity or search term changes\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    const fetchData = () => {\n      if (selectedEntity === USERS) {\n        searchUsers(query)\n      } else if (selectedEntity === REPO) {\n        searchRepo(query)\n      }\n    }\n    fetchData();\n  }, [selectedEntity, query])\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const query = e.target.value;\n    if (!query) {\n      setQuery('');\n      return;\n    }\n    setQuery(query)\n  }\n\n  const handleEntityChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const entity = e.target.value;\n    setSelectedEntity(entity)\n  }\n\n  const handleNextPageLoad = () => {\n    if (selectedEntity === USERS) {\n      searchNextUsers(query);\n    } else if (selectedEntity === REPO) {\n      searchNextRepos(query)\n    }\n  }\n\n  return (\n    <SearchContainer\n      flexDirection=\"column\"\n      hasInputValue={query.length !== 0}>\n      <Search flexDirection=\"column\">\n        <GithubHeader />\n        <GithubSearchInput\n          selectedEntity={selectedEntity}\n          onInputChange={handleInputChange}\n          onEntityChange={handleEntityChange}\n        />\n      </Search>\n      {\n        isLoading && (\n          userList.length === 0 && repoList.length === 0 &&\n          <h2>Searching...</h2>\n        )\n      }\n      {\n        query &&\n        !errorMessage &&\n        <Flex mt={3}>\n          <GithubResultDisplay\n            isLoading={isLoading}\n            entity={selectedEntity}\n            onLoadMore={handleNextPageLoad}\n            userList={userList}\n            repoList={repoList}/>\n        </Flex>\n      }\n      {\n        query &&\n        errorMessage &&\n        <Flex mt={3}>\n          <Error>\n            {errorMessage}\n          </Error>\n        </Flex>\n      }\n      <Link to=\"/💣\" className={corner}>💣</Link>\n    </SearchContainer>\n  );\n}\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    searchUsers: (term: any) => dispatch(searchUsers(term)),\n    searchNextUsers: (query: string) => dispatch(searchNextUsers(query)),\n    searchRepo: (term: any) => dispatch(searchRepo(term)),\n    searchNextRepos: (query: string) => dispatch(searchNextRepos(query)),\n  }\n}\nconst mapStateToProps = (state: any) => state\n\nconst GithubSearchConnected = connect(mapStateToProps, mapDispatchToProps)(GithubSearch)\nexport default GithubSearchConnected","import { Link } from 'react-router-dom'\n\nconst NotFound = () => {\n  return <h4>\n    Seems like you are lost!\n    Click <Link to=\"/github-search\">here</Link> to go to Github Search\n  </h4>;\n}\n\nexport default NotFound","const Error = () => {\n  throw new TypeError('I crashed!');\n}\n\nexport default Error","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport store, { persistor } from './store'\nimport ErrorBoundary from './components/ErrorBoundary';\n\nimport {\n  GithubSearch,\n  NotFound,\n  Error\n} from './pages';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <Provider store={store}>\n        <PersistGate persistor={persistor}>\n          <Router>\n            <Switch>\n              <Route exact path=\"/github-search\">\n                <GithubSearch />\n              </Route>\n              <Route exact path=\"/💣\">\n                <Error />\n              </Route>\n              <Route path=\"*\">\n                <NotFound />\n              </Route>\n            </Switch>\n          </Router>\n        </PersistGate>\n      </Provider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}