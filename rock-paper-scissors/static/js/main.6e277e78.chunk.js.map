{"version":3,"sources":["utils/const.js","components/GameModeChooseModal.js","utils/GameModeContext.js","utils/utility.js","components/ScoreCard.js","components/Header.js","components/Button.js","components/RulesModal.js","components/Thumb.js","pages/GamePlay/ComputerChose/ComputerChoseStyles.js","pages/GamePlay/ComputerChose/ComputerChoseMobile.js","pages/GamePlay/ComputerChose/ComputerChoseDesktop.js","pages/GamePlay/ComputerChose/ComputerChose.js","pages/GamePlay/ResultAnnounce/ResultAnnounceMobile.js","pages/GamePlay/ResultAnnounce/ResultAnnounceDesktop.js","pages/GamePlay/ResultAnnounce/ResultAnnounce.js","pages/GamePlay/ThumbChooser/ThumbChooserStyles.js","pages/GamePlay/ThumbChooser/ThumbChooserLayout.js","pages/GamePlay/ThumbChooser/ThumbChooser.js","pages/GamePlay/GamePlay.js","App.js","reportWebVitals.js","styles/palette.js","styles/colors.js","styles/theme.js","index.js"],"names":["TYPES","ROCK","PAPER","SCISSORS","LIZARD","SPOCK","DIFFICULTY","NOVICE","PRO","CONST","LOCAL_STORAGE_SCORE_KEY","GAME_STATE","PICK","USER_PICKED","RESULT","USER","COMPUTER","TIE","WHO_BEATS_WHO","overlayModalClass","css","customStyles","content","backgroundColor","borderRadius","margin","width","height","customStylesMobile","padding","left","top","Title","styled","SubTitle","Smiley","GameModeChooseModal","canShowModal","setGameDifficultyMode","useContext","GameDifficultyContext","useState","showGameModeModal","setShowGameModeModal","isSmallScreen","useMediaQuery","query","handleModalShow","difficulty","style","overlayClassName","isOpen","contentLabel","justifyContent","alignItems","flexDirection","onClick","createContext","GameModeContext","children","gameDifficultyMode","Provider","value","getUpdatedScore","score","result","currentScore","parseInt","updatedScore","localStorage","setItem","getResultText","isNovice","ScoreCardContainer","Flex","theme","palette","white","ScoreText","colors","text","secondary","Score","primary","ScoreCard","HeaderContainer","components","header","border","Image","Header","src","alt","ButtonContainer","button","color","hover","background","Button","props","ModalHeader","modal","title","CloseIcon","RulesModal","showRulesModal","setShowRulesModal","THUMB_SIZE","ThumbContainer","hasWon","thumbSize","thumbType","thumb","undefined","shadow","Thumb","bounce","keyframes","bouncyCss","ComputerChoseMobileContainer","visibleHidden","visibility","ComputerChoseMobile","userChose","computerChose","CSSTransition","in","classNames","timeout","ThumbHolder","ComputerChoseDesktop","mt","ComputerChoseContainer","ComputerChose","onComputerChosen","setComputerChose","useEffect","randomValue","setTimeout","arrayOfValues","Object","keys","Math","floor","random","length","Result","spinAndZoom","spinAndZoomCss","ResultAnnounceMobile","onPlayAgainClick","pt","ResultAnnounceDesktop","ResultAnnounce","noviceThumbStyling","proThumbStyling","ThumbChooserLayoutContainer","ThumbChooserLayout","isNoviceMode","ThumbChooser","onUserChosen","thumbsToShow","map","className","GamePlayContainer","GameWorkingContainer","initialState","getItem","gameStage","GamePlay","state","setState","gameWinning","includes","getResult","AppContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","scissors","0","100","paper","rock","lizard","spock","stop","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.6e277e78.chunk.js","sourcesContent":["const TYPES = {\n  ROCK: 'ROCK',\n  PAPER: 'PAPER',\n  SCISSORS: 'SCISSORS',\n  LIZARD: 'LIZARD',\n  SPOCK: 'SPOCK'\n}\n\nconst DIFFICULTY = {\n  NOVICE: 'NOVICE',\n  PRO: 'PRO'\n}\n\nconst CONST = {\n  LOCAL_STORAGE_SCORE_KEY: 'score',\n  GAME_STATE: {\n    PICK: 'PICK',\n    USER_PICKED: 'USER_PICKED',\n    RESULT: 'RESULT'\n  },\n  RESULT: {\n    USER: 'USER',\n    COMPUTER: 'COMPUTER',\n    TIE: 'TIE'\n  },\n  TYPES,\n  DIFFICULTY,\n  WHO_BEATS_WHO: {\n    [DIFFICULTY.NOVICE]: {\n      [TYPES.PAPER]: [TYPES.ROCK],\n      [TYPES.ROCK]: [TYPES.SCISSORS],\n      [TYPES.SCISSORS]: [TYPES.PAPER]\n    },\n    [DIFFICULTY.PRO]: {\n      [TYPES.PAPER]: [TYPES.ROCK, TYPES.SPOCK],\n      [TYPES.ROCK]: [TYPES.SCISSORS, TYPES.LIZARD],\n      [TYPES.SCISSORS]: [TYPES.PAPER, TYPES.LIZARD],\n      [TYPES.LIZARD]: [TYPES.SPOCK, TYPES.PAPER],\n      [TYPES.SPOCK]: [TYPES.SCISSORS, TYPES.ROCK]\n    }\n  }\n}\n\nexport default CONST\n","import React, { useContext, useState } from 'react'\nimport Modal from 'react-modal'\nimport { css } from '@emotion/react'\nimport styled from '@emotion/styled'\nimport { Flex } from 'rebass'\n\nimport { GameDifficultyContext } from '../utils/GameModeContext'\nimport CONST from '../utils/const'\nimport { useMediaQuery } from 'react-responsive'\n\nconst {\n  DIFFICULTY: { NOVICE, PRO }\n} = CONST\n\nconst overlayModalClass = css`\n  background: transparent;\n`\n\nconst customStyles = {\n  content: {\n    backgroundColor: '#6dd9e0',\n    borderRadius: '4px',\n    margin: 'auto',\n    width: '25%',\n    height: '35%'\n  }\n}\n\nconst customStylesMobile = {\n  content: {\n    backgroundColor: '#6dd9e0',\n    borderRadius: '4px',\n    width: '99vw',\n    height: '99vh',\n    padding: 0,\n    left: 0,\n    top: 0\n  }\n}\n\nconst Title = styled('div')`\n  text-transform: uppercase;\n  font-size: 24px;\n  font-weight: 700;\n  text-align: center;\n`\n\nconst SubTitle = styled('span')`\n  text-transform: uppercase;\n  font-size: 16px;\n  font-weight: 600;\n  text-align: center;\n`\n\nconst Smiley = styled('span')`\n  text-align: center;\n  font-size: 100px;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`\n\nconst GameModeChooseModal = (canShowModal) => {\n  const { setGameDifficultyMode } = useContext(GameDifficultyContext)\n  const [showGameModeModal, setShowGameModeModal] = useState(canShowModal)\n  const isSmallScreen = useMediaQuery({\n    query: '(max-width: 1366px)'\n  })\n\n  const handleModalShow = (difficulty) => {\n    setShowGameModeModal(!showGameModeModal)\n    setGameDifficultyMode(difficulty)\n  }\n\n  return (\n    <Modal\n      style={isSmallScreen ? customStylesMobile : customStyles}\n      overlayClassName={overlayModalClass}\n      isOpen={showGameModeModal}\n      contentLabel=\"Example Modal\">\n      <Title>Choose one to enter game 🎮</Title>\n      <Flex justifyContent=\"space-evenly\" height=\"80%\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Smiley\n            onClick={() => {\n              handleModalShow(NOVICE)\n            }}>\n            👶🏻\n          </Smiley>\n          <SubTitle>{NOVICE}</SubTitle>\n        </Flex>\n        <Flex flexDirection=\"column\">\n          <Smiley\n            onClick={() => {\n              handleModalShow(PRO)\n            }}>\n            💪🏻\n          </Smiley>\n          <SubTitle>{PRO}</SubTitle>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default GameModeChooseModal\n","import { createContext, useState } from 'react'\nimport GameModeChooseModal from '../components/GameModeChooseModal'\n\nconst GameDifficultyContext = createContext()\n\nconst GameModeContext = ({ children }) => {\n  const [gameDifficultyMode, setGameDifficultyMode] = useState('')\n  return (\n    <GameDifficultyContext.Provider\n      value={{ difficulty: gameDifficultyMode, setGameDifficultyMode }}>\n      {gameDifficultyMode === '' && <GameModeChooseModal />}\n      {gameDifficultyMode !== '' && children}\n    </GameDifficultyContext.Provider>\n  )\n}\n\nexport default GameModeContext\nexport { GameDifficultyContext }\n","import CONST from './const'\n\nconst {\n  LOCAL_STORAGE_SCORE_KEY,\n  RESULT: { TIE, USER, COMPUTER },\n  WHO_BEATS_WHO,\n  DIFFICULTY\n} = CONST\n\nconst getUpdatedScore = (score, result) => {\n  if (result === TIE) {\n    return score\n  }\n\n  let currentScore = parseInt(score),\n    updatedScore = result === USER ? currentScore + 1 : currentScore - 1\n\n  // save to local storage\n  localStorage.setItem(LOCAL_STORAGE_SCORE_KEY, updatedScore)\n  return updatedScore\n}\n\nconst getResult = (userChose, computerChose, difficulty) => {\n  let result = TIE,\n    gameWinning = WHO_BEATS_WHO[difficulty]\n\n  if (gameWinning[computerChose].includes(userChose)) result = COMPUTER\n  else if (gameWinning[userChose].includes(computerChose)) result = USER\n\n  return result\n}\n\nconst getResultText = (result) => {\n  if (result === TIE) return 'Its a Tie 🤜🏻🤛🏻'\n  if (result === USER) return 'You won 🥳'\n  if (result === COMPUTER) return 'You lose 🤯'\n}\n\nconst getRandomValue = (arrayOfValues) => {\n  const randomIndex = Math.floor(Math.random() * arrayOfValues.length)\n  return arrayOfValues[randomIndex]\n}\n\nconst isNovice = (difficulty) => difficulty === DIFFICULTY.NOVICE\n\nexport { getUpdatedScore, getResult, getRandomValue, getResultText, isNovice }\n","import styled from '@emotion/styled'\nimport { Flex } from 'rebass'\n\nconst ScoreCardContainer = styled(Flex)`\n  padding: 0px 5px;\n  width: 100px;\n  height: 85px;\n  border-radius: 5px;\n  background-color: ${({ theme }) => theme.palette.white};\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst ScoreText = styled('span')`\n  text-transform: uppercase;\n  padding-top: 5px;\n  font-size: 11px;\n  color: ${({ theme }) => theme.colors.text.secondary};\n`\n\nconst Score = styled('span')`\n  font-size: 45px;\n  color: ${({ theme }) => theme.colors.text.primary};\n`\n\nconst ScoreCard = ({ score }) => {\n  return (\n    <ScoreCardContainer>\n      <ScoreText>Score</ScoreText>\n      <Score>{score}</Score>\n    </ScoreCardContainer>\n  )\n}\n\nexport default ScoreCard\n","import styled from '@emotion/styled'\nimport { useContext } from 'react'\nimport { Flex } from 'rebass'\n\nimport { GameDifficultyContext } from '../utils/GameModeContext'\nimport { isNovice } from '../utils/utility'\nimport ScoreCard from './ScoreCard'\n\nconst HeaderContainer = styled(Flex)`\n  border: 2px solid ${({ theme }) => theme.colors.components.header.border};\n  border-radius: 10px;\n  padding: 15px 15px;\n  justify-content: space-between;\n  align-items: center;\n  width: 60%;\n  min-width: 320px;\n  @media (max-width: 1366px) {\n    min-width: 290px;\n  }\n`\n\nconst Image = styled('img')`\n  height: 85px;\n`\n\nconst Header = ({ score }) => {\n  const { difficulty } = useContext(GameDifficultyContext)\n\n  return (\n    <HeaderContainer>\n      <Image\n        src={isNovice(difficulty) ? './images/logo.svg' : './images/logo-bonus.svg'}\n        alt=\"logo\"\n      />\n      <ScoreCard score={score} />\n    </HeaderContainer>\n  )\n}\n\nexport default Header\n","import styled from '@emotion/styled'\n\nconst ButtonContainer = styled('button')`\n  ${({\n    theme: {\n      colors: {\n        components: { button }\n      }\n    }\n  }) => `\n    all: unset;\n    color: ${button.color};\n    border: 1px solid ${button.border};\n    text-transform: uppercase;\n    padding: 10px 25px;\n    border-radius: 5px;\n    font-size: 13px;\n    cursor: pointer;\n    transition: all 0.2s ease-in-out;\n\n    &:hover {\n      background: ${button.hover.background};;\n      color: ${button.hover.color};\n    }\n  `}\n`\n\nconst Button = ({ children, ...props }) => {\n  return <ButtonContainer {...props}>{children}</ButtonContainer>\n}\n\nexport default Button\n","import React, { useContext, useState } from 'react'\nimport Modal from 'react-modal'\nimport { css } from '@emotion/react'\nimport styled from '@emotion/styled'\nimport { Flex } from 'rebass'\n\nimport Button from './Button'\nimport { useMediaQuery } from 'react-responsive'\nimport { GameDifficultyContext } from '../utils/GameModeContext'\nimport { isNovice } from '../utils/utility'\n\nconst overlayModalClass = css`\n  background: transparent;\n`\n\nconst customStyles = {\n  content: {\n    backgroundColor: 'white',\n    borderRadius: '4px',\n    margin: 'auto',\n    width: '25%',\n    height: '50%'\n  }\n}\n\nconst customStylesMobile = {\n  content: {\n    backgroundColor: 'white',\n    borderRadius: '4px',\n    width: '90vw',\n    height: '90vh',\n    left: 0,\n    top: 0\n  }\n}\n\nconst Title = styled('span')`\n  text-transform: uppercase;\n  font-size: 24px;\n  font-weight: 700;\n`\n\nconst ModalHeader = styled(Flex)`\n  width: 100%;\n  color: ${({ theme }) => theme.colors.components.modal.title};\n  align-items: center;\n  justify-content: space-between;\n`\n\nconst CloseIcon = styled('img')`\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n`\n\nconst RulesModal = () => {\n  const { difficulty } = useContext(GameDifficultyContext)\n  const isSmallScreen = useMediaQuery({\n    query: '(max-width: 1366px)'\n  })\n  const [showRulesModal, setShowRulesModal] = useState(false)\n\n  const handleModalShow = () => {\n    setShowRulesModal(!showRulesModal)\n  }\n\n  return (\n    <>\n      <Button onClick={handleModalShow}>Rules</Button>\n      <Modal\n        style={isSmallScreen ? customStylesMobile : customStyles}\n        overlayClassName={overlayModalClass}\n        isOpen={showRulesModal}\n        contentLabel=\"Example Modal\">\n        <Flex flexDirection=\"column\" height=\"100%\" justifyContent=\"space-between\">\n          <ModalHeader>\n            <Title>Rules</Title>\n            <CloseIcon onClick={handleModalShow} src=\"./images/icon-close.svg\" />\n          </ModalHeader>\n          <Flex justifyContent=\"center\" alignItems=\"center\" height=\"100%\">\n            <img\n              alt=\"rules\"\n              src={\n                isNovice(difficulty) ? './images/image-rules.svg' : './images/image-rules-bonus.svg'\n              }\n            />\n          </Flex>\n        </Flex>\n      </Modal>\n    </>\n  )\n}\n\nexport default RulesModal\n","import styled from '@emotion/styled'\nimport CONST from '../utils/const'\n\nconst THUMB_TYPES = CONST.TYPES\n\nconst THUMB_SIZE = {\n  SMALL: 'SMALL',\n  MEDIUM: 'MEDIUM'\n}\n\nconst ThumbContainer = styled('div')`\n  ${({\n    hasWon,\n    thumbSize,\n    thumbType,\n    theme: {\n      colors: {\n        components: { thumb }\n      }\n    }\n  }) => {\n    return `\n      width: 160px;\n      height: 160px;\n      @media (max-width: 1366px) {\n        width: 100px;\n        height: 100px;\n      }\n      background: ${thumb.background};\n      border-radius: 50%;\n      display: table;\n      cursor: ${hasWon === undefined ? 'pointer' : 'default'};\n      transition: all 0.2s ease-in-out;\n      user-select: none;\n      transform: scale(${thumbSize === THUMB_SIZE.SMALL ? 1 : 1.4});\n      box-shadow: ${\n        hasWon\n          ? '0 0 0 40px rgb(240 240 240 / 4%), 0 0 0 80px rgb(255 255 255 / 3%), 0 0 0 120px rgb(255 255 255 / 2%)'\n          : 'none'\n      };\n      background: url(./images/${thumbType}.svg) no-repeat center;\n      background-color: white;\n      background-size: auto 80px;\n      @media (max-width: 1366px) {\n        background-size: auto 45px;\n      }\n\n      &::after {\n        content: ' ';\n        width: 130px;\n        height: 130px;\n        @media (max-width: 1366px) {\n          width: 80px;\n          height: 80px;\n        }\n        background-color: transparent;\n        border-radius: 50%;\n        border: 15px solid ${thumb[thumbType]};\n        @media (max-width: 1366px) {\n          border: 10px solid ${thumb[thumbType]};\n        }\n        box-shadow: inset 0px 4px 0px 1px ${thumb.shadow};\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      &:hover {\n        transform: scale(${\n          hasWon !== undefined ? 'none' : thumbSize === THUMB_SIZE.SMALL ? 1.05 : 1.45\n        });\n      }\n    `\n  }}\n`\n\nconst Thumb = ({ thumbType, thumbSize, hasWon, ...props }) => {\n  if (!thumbType) return null\n  return <ThumbContainer thumbType={thumbType} thumbSize={thumbSize} hasWon={hasWon} {...props} />\n}\n\nexport default Thumb\nexport { THUMB_TYPES, THUMB_SIZE }\n","import { css, keyframes } from '@emotion/react'\n\nconst bounce = keyframes`\n  0% {\n    transform: scale(0);\n  }\n\n  40% {\n    transform: scale(1.6);\n  }\n\n  70% {\n    transform: scale(0.9);\n  }\n\n  100% {\n    transform: scale(1.4);\n  }\n`\n\nconst bouncyCss = css`\n  .bouncy-enter {\n    animation: ${bounce} 1s ease-in-out;\n  }\n`\n\nexport { bouncyCss }\n","import styled from '@emotion/styled'\nimport { CSSTransition } from 'react-transition-group'\nimport { Flex } from 'rebass'\n\nimport Thumb, { THUMB_SIZE } from '../../../components/Thumb'\nimport CONST from '../../../utils/const'\nimport { bouncyCss } from './ComputerChoseStyles'\n\nconst ComputerChoseMobileContainer = styled(Flex)`\n  width: 100%;\n  padding-top: 15%;\n  flex-direction: column;\n`\n\nconst Title = styled('div')`\n  color: white;\n  text-transform: uppercase;\n  font-size: 10px;\n  padding-top: 40px;\n  text-align: center;\n`\n\nconst visibleHidden = {\n  visibility: 'hidden'\n}\n\nconst ComputerChoseMobile = ({ userChose, computerChose }) => {\n  return (\n    <ComputerChoseMobileContainer>\n      <Flex justifyContent=\"space-around\">\n        <Flex flexDirection=\"column\">\n          <Thumb thumbSize={THUMB_SIZE.MEDIUM} thumbType={userChose} hasWon={false} />\n          <Title>You Picked</Title>\n        </Flex>\n        <Flex flexDirection=\"column\" css={bouncyCss}>\n          <CSSTransition in={computerChose !== ''} classNames=\"bouncy\" timeout={1000}>\n            <Thumb\n              key=\"computerChose\"\n              thumbSize={THUMB_SIZE.MEDIUM}\n              thumbType={computerChose}\n              hasWon={false}\n            />\n          </CSSTransition>\n          {computerChose === '' && (\n            <Thumb\n              style={visibleHidden}\n              thumbSize={THUMB_SIZE.MEDIUM}\n              thumbType={CONST.TYPES.ROCK}\n              hasWon={false}\n            />\n          )}\n          <Title>The House Picked</Title>\n        </Flex>\n      </Flex>\n    </ComputerChoseMobileContainer>\n  )\n}\n\nexport default ComputerChoseMobile\n","import { Box, Flex } from 'rebass'\nimport styled from '@emotion/styled'\n\nimport { CSSTransition } from 'react-transition-group'\n\nimport Thumb, { THUMB_SIZE } from '../../../components/Thumb'\nimport { bouncyCss } from './ComputerChoseStyles'\n\nconst Title = styled('div')`\n  color: white;\n  text-transform: uppercase;\n  font-size: 20px;\n`\n\nconst ThumbHolder = ({ title, children }) => (\n  <Flex flexDirection=\"column\" alignItems=\"center\">\n    <Title>{title}</Title>\n    {children}\n  </Flex>\n)\n\nconst ComputerChoseDesktop = ({ userChose, computerChose }) => {\n  return (\n    <>\n      <ThumbHolder title=\"You Picked\">\n        <Box mt={6}>\n          <Thumb thumbSize={THUMB_SIZE.MEDIUM} thumbType={userChose} hasWon={false} />\n        </Box>\n      </ThumbHolder>\n      <ThumbHolder title=\"The House Picked\">\n        <Box mt={6} css={bouncyCss}>\n          <CSSTransition in={computerChose !== ''} classNames=\"bouncy\" timeout={1000}>\n            <Thumb\n              key=\"computerChose\"\n              thumbSize={THUMB_SIZE.MEDIUM}\n              thumbType={computerChose}\n              hasWon={false}\n            />\n          </CSSTransition>\n        </Box>\n      </ThumbHolder>\n    </>\n  )\n}\n\nexport default ComputerChoseDesktop\n","import styled from '@emotion/styled'\nimport { useContext, useEffect, useState } from 'react'\nimport { Flex } from 'rebass'\nimport { useMediaQuery } from 'react-responsive'\n\nimport CONST from '../../../utils/const'\nimport { getRandomValue } from '../../../utils/utility'\nimport ComputerChoseMobile from './ComputerChoseMobile'\nimport ComputerChoseDesktop from './ComputerChoseDesktop'\nimport { GameDifficultyContext } from '../../../utils/GameModeContext'\n\nconst ComputerChoseContainer = styled(Flex)`\n  width: 600px;\n  display: flex;\n  justify-content: space-around;\n  @media (max-width: 1366px) {\n    height: 100%;\n  }\n`\n\nconst ComputerChose = ({ userChose, onComputerChosen }) => {\n  const { difficulty } = useContext(GameDifficultyContext)\n\n  const isSmallScreen = useMediaQuery({\n    query: '(max-width: 1366px)'\n  })\n  const [computerChose, setComputerChose] = useState('')\n\n  useEffect(() => {\n    let randomValue = ''\n    setTimeout(() => {\n      randomValue = getRandomValue(Object.keys(CONST.WHO_BEATS_WHO[difficulty]))\n      setComputerChose(randomValue)\n      setTimeout(() => {\n        onComputerChosen(randomValue)\n      }, 1500)\n    }, 500)\n  }, [difficulty, onComputerChosen])\n\n  return (\n    <ComputerChoseContainer>\n      {isSmallScreen ? (\n        <ComputerChoseMobile userChose={userChose} computerChose={computerChose} />\n      ) : (\n        <ComputerChoseDesktop userChose={userChose} computerChose={computerChose} />\n      )}\n    </ComputerChoseContainer>\n  )\n}\n\nexport default ComputerChose\n","import styled from '@emotion/styled'\nimport { css, keyframes } from '@emotion/react'\nimport { Box, Flex } from 'rebass'\n\nimport { getResultText } from '../../../utils/utility'\nimport Button from '../../../components/Button'\nimport Thumb, { THUMB_SIZE } from '../../../components/Thumb'\nimport CONST from '../../../utils/const'\n\nconst Title = styled('div')`\n  color: white;\n  text-transform: uppercase;\n  font-size: 10px;\n  padding-top: 40px;\n  text-align: center;\n`\n\nconst Result = styled('div')`\n  text-transform: uppercase;\n  color: white;\n  font-size: 30px;\n`\n\nconst spinAndZoom = keyframes`\n  0% {\n    transform: scale(0) rotate(0deg);\n  }\n  100% {\n    transform: scale(1) rotate(360deg);\n  }\n`\n\nconst spinAndZoomCss = css`\n  animation: ${spinAndZoom} 0.5s ease-in-out;\n`\n\nconst ResultAnnounceMobile = ({ userChose, computerChose, result, onPlayAgainClick }) => {\n  return (\n    <>\n      <Flex justifyContent=\"space-around\">\n        <Flex flexDirection=\"column\">\n          <Thumb\n            thumbSize={THUMB_SIZE.MEDIUM}\n            thumbType={userChose}\n            hasWon={result === CONST.RESULT.USER}\n          />\n          <Title>You Picked</Title>\n        </Flex>\n        <Flex flexDirection=\"column\">\n          <Thumb\n            thumbSize={THUMB_SIZE.MEDIUM}\n            thumbType={computerChose}\n            hasWon={result === CONST.RESULT.COMPUTER}\n          />\n          <Title>The House Picked</Title>\n        </Flex>\n      </Flex>\n\n      <Flex css={spinAndZoomCss} flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n        <Result>{getResultText(result)}</Result>\n        <Box pt={2}>\n          <Button onClick={onPlayAgainClick}>Play again</Button>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n\nexport default ResultAnnounceMobile\n","import styled from '@emotion/styled'\nimport { Box, Flex } from 'rebass'\nimport { css, keyframes } from '@emotion/react'\n\nimport Thumb, { THUMB_SIZE } from '../../../components/Thumb'\nimport CONST from '../../../utils/const'\nimport Button from '../../../components/Button'\nimport { getResultText } from '../../../utils/utility'\n\nconst Title = styled('div')`\n  color: white;\n  width: 25%;\n  text-transform: uppercase;\n  text-align: center;\n`\n\nconst Result = styled('div')`\n  text-transform: uppercase;\n  color: white;\n  font-size: 30px;\n`\n\nconst spinAndZoom = keyframes`\n  0% {\n    transform: scale(0) rotate(0deg);\n  }\n  100% {\n    transform: scale(1) rotate(360deg);\n  }\n`\n\nconst spinAndZoomCss = css`\n  animation: ${spinAndZoom} 0.5s ease-in-out;\n`\n\nconst ResultAnnounceDesktop = ({ userChose, computerChose, result, onPlayAgainClick }) => {\n  return (\n    <>\n      <Flex justifyContent=\"space-between\" width=\"100%\">\n        <Title>You Picked</Title>\n        <Title>The House Picked</Title>\n      </Flex>\n      <Flex justifyContent=\"space-between\" width=\"100%\" mt={6}>\n        <Thumb\n          thumbSize={THUMB_SIZE.MEDIUM}\n          thumbType={userChose}\n          hasWon={result === CONST.RESULT.USER}\n        />\n        <Flex\n          css={spinAndZoomCss}\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\">\n          <Result>{getResultText(result)}</Result>\n          <Box pt={2}>\n            <Button onClick={onPlayAgainClick}>Play again</Button>\n          </Box>\n        </Flex>\n        <Thumb\n          thumbSize={THUMB_SIZE.MEDIUM}\n          thumbType={computerChose}\n          hasWon={result === CONST.RESULT.COMPUTER}\n        />\n      </Flex>\n    </>\n  )\n}\n\nexport default ResultAnnounceDesktop\n","import styled from '@emotion/styled'\nimport { Flex } from 'rebass'\nimport { useMediaQuery } from 'react-responsive'\n\nimport ResultAnnounceMobile from './ResultAnnounceMobile'\nimport ResultAnnounceDesktop from './ResultAnnounceDesktop'\n\nconst ComputerChoseContainer = styled(Flex)`\n  width: 600px;\n  display: flex;\n  justify-content: space-around;\n  flex-direction: column;\n  @media (max-width: 1366px) {\n    height: 100%;\n  }\n`\n\nconst ResultAnnounce = (props) => {\n  const isSmallScreen = useMediaQuery({\n    query: '(max-width: 1366px)'\n  })\n  return (\n    <ComputerChoseContainer>\n      {isSmallScreen ? <ResultAnnounceMobile {...props} /> : <ResultAnnounceDesktop {...props} />}\n    </ComputerChoseContainer>\n  )\n}\n\nexport default ResultAnnounce\n","import { css } from '@emotion/react'\n\nconst noviceThumbStyling = css`\n  .PAPER {\n    position: relative;\n    bottom: 120px;\n    left: 10px;\n    @media (max-width: 1366px) {\n      bottom: 80px;\n      right: 70px;\n    }\n  }\n  .ROCK {\n    position: relative;\n    bottom: 120px;\n    left: 140px;\n    @media (max-width: 1366px) {\n      bottom: 80px;\n      left: 90px;\n    }\n  }\n  .SCISSORS {\n    position: relative;\n    top: 100px;\n    right: 160px;\n    @media (max-width: 1366px) {\n      top: 70px;\n      right: 100px;\n    }\n  }\n`\n\nconst proThumbStyling = css`\n  .PAPER {\n    position: relative;\n    bottom: 40px;\n    left: 140px;\n    @media (max-width: 1366px) {\n      bottom: 20px;\n      left: 100px;\n    }\n  }\n  .ROCK {\n    position: relative;\n    bottom: 150px;\n    left: 160px;\n    @media (max-width: 1366px) {\n      bottom: 110px;\n      left: 100px;\n    }\n  }\n  .SCISSORS {\n    position: relative;\n    bottom: 40px;\n    left: 170px;\n    @media (max-width: 1366px) {\n      bottom: 20px;\n      left: 100px;\n    }\n  }\n\n  .LIZARD {\n    position: relative;\n    top: 160px;\n    right: 270px;\n    @media (max-width: 1366px) {\n      top: 110px;\n      right: 160px;\n    }\n  }\n  .SPOCK {\n    position: relative;\n    top: 160px;\n    right: 200px;\n    @media (max-width: 1366px) {\n      top: 110px;\n      right: 130px;\n    }\n  }\n`\n\nexport { noviceThumbStyling, proThumbStyling }\n","import styled from '@emotion/styled'\nimport { useContext } from 'react'\nimport { Flex } from 'rebass'\n\nimport { GameDifficultyContext } from '../../../utils/GameModeContext'\nimport { isNovice } from '../../../utils/utility'\nimport { noviceThumbStyling, proThumbStyling } from './ThumbChooserStyles'\n\nconst Image = styled('img')`\n  position: absolute;\n  @media (max-width: 1366px) {\n    height: ${({ isNovice }) => (isNovice ? 170 : 240)}px;\n  }\n`\n\nconst ThumbChooserLayoutContainer = styled(Flex)`\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n`\n\nconst ThumbChooserLayout = ({ children }) => {\n  const { difficulty } = useContext(GameDifficultyContext)\n  const isNoviceMode = isNovice(difficulty)\n\n  return (\n    <ThumbChooserLayoutContainer css={isNoviceMode ? noviceThumbStyling : proThumbStyling}>\n      <Image\n        isNovice={isNoviceMode}\n        src={isNoviceMode ? './images/bg-triangle.svg' : './images/bg-pentagon.svg'}\n      />\n      {children}\n    </ThumbChooserLayoutContainer>\n  )\n}\n\nexport default ThumbChooserLayout\n","import { useContext } from 'react'\nimport Thumb, { THUMB_SIZE } from '../../../components/Thumb'\nimport CONST from '../../../utils/const'\nimport { GameDifficultyContext } from '../../../utils/GameModeContext'\nimport ThumbChooserLayout from './ThumbChooserLayout'\n\nconst ThumbChooser = ({ onUserChosen }) => {\n  const { difficulty } = useContext(GameDifficultyContext)\n  const thumbsToShow = Object.keys(CONST.WHO_BEATS_WHO[difficulty])\n\n  return (\n    <ThumbChooserLayout>\n      {thumbsToShow.map((thumb) => (\n        <Thumb\n          className={thumb}\n          key={thumb}\n          thumbSize={THUMB_SIZE.SMALL}\n          thumbType={thumb}\n          onClick={() => {\n            onUserChosen(thumb)\n          }}\n        />\n      ))}\n    </ThumbChooserLayout>\n  )\n}\n\nexport default ThumbChooser\n","import styled from '@emotion/styled'\nimport { useContext, useState } from 'react'\nimport { Flex } from 'rebass'\n\nimport Header from '../../components/Header'\nimport RulesModal from '../../components/RulesModal'\nimport CONST from '../../utils/const'\nimport { GameDifficultyContext } from '../../utils/GameModeContext'\nimport { getUpdatedScore, getResult } from '../../utils/utility'\nimport ComputerChose from './ComputerChose/ComputerChose'\nimport ResultAnnounce from './ResultAnnounce/ResultAnnounce'\nimport ThumbChooser from './ThumbChooser/ThumbChooser'\n\nconst { LOCAL_STORAGE_SCORE_KEY, GAME_STATE } = CONST\n\nconst GamePlayContainer = styled(Flex)`\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n`\n\nconst GameWorkingContainer = styled(Flex)`\n  width: 100%;\n  height: 70%;\n  align-items: center;\n  justify-content: center;\n`\n\nconst initialState = {\n  score: localStorage.getItem(LOCAL_STORAGE_SCORE_KEY) || 0,\n  gameStage: GAME_STATE.PICK,\n  userChose: '',\n  computerChose: '',\n  result: ''\n}\n\nconst GamePlay = () => {\n  const { difficulty } = useContext(GameDifficultyContext)\n  const [state, setState] = useState(initialState)\n\n  const handleUserChosen = (value) => {\n    setState({\n      ...state,\n      gameStage: GAME_STATE.USER_PICKED,\n      userChose: value\n    })\n  }\n\n  const handleComputerChosen = (value) => {\n    const userChose = state.userChose,\n      computerChose = value,\n      result = getResult(userChose, computerChose, difficulty)\n\n    setState({\n      ...state,\n      computerChose: value,\n      gameStage: GAME_STATE.RESULT,\n      result,\n      score: getUpdatedScore(state.score, result)\n    })\n  }\n\n  const handlePlayAgain = () => {\n    setState({\n      ...initialState,\n      score: localStorage.getItem(LOCAL_STORAGE_SCORE_KEY)\n    })\n  }\n\n  return (\n    <GamePlayContainer>\n      <Header score={state.score} />\n      <GameWorkingContainer>\n        {state.gameStage === GAME_STATE.PICK && <ThumbChooser onUserChosen={handleUserChosen} />}\n        {state.gameStage === GAME_STATE.USER_PICKED && (\n          <ComputerChose userChose={state.userChose} onComputerChosen={handleComputerChosen} />\n        )}\n        {state.gameStage === GAME_STATE.RESULT && (\n          <ResultAnnounce\n            userChose={state.userChose}\n            computerChose={state.computerChose}\n            result={state.result}\n            onPlayAgainClick={handlePlayAgain}\n          />\n        )}\n      </GameWorkingContainer>\n      <Flex justifyContent=\"center\">\n        <RulesModal />\n      </Flex>\n    </GamePlayContainer>\n  )\n}\n\nexport default GamePlay\n","import styled from '@emotion/styled'\nimport { Flex } from 'rebass'\n\nimport GamePlay from './pages/GamePlay/GamePlay'\nimport GameModeContext from './utils/GameModeContext'\n\nconst AppContainer = styled(Flex)`\n  align-items: center;\n  justify-content: center;\n  height: 90vh;\n`\n\nfunction App() {\n  return (\n    <AppContainer>\n      <GameModeContext>\n        <GamePlay />\n      </GameModeContext>\n    </AppContainer>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","const palette = {\n  scissors: {\n    0: 'hsl(39, 89%, 49%)',\n    100: 'hsl(40, 84%, 53%)'\n  },\n  paper: {\n    0: 'hsl(230, 89%, 62%)',\n    100: 'hsl(230, 89%, 65%)'\n  },\n  rock: {\n    0: 'hsl(349, 71%, 52%)',\n    100: 'hsl(349, 70%, 56%)'\n  },\n  lizard: {\n    0: 'hsl(261, 73%, 60%)',\n    100: 'hsl(261, 72%, 63%)'\n  },\n  spock: {\n    0: 'hsl(189, 59%, 53%)',\n    100: 'hsl(189, 58%, 57%)'\n  },\n  white: '#fff',\n  stop: '#ff3838',\n  primary: 'hsl(229, 25%, 31%)',\n  secondary: 'hsl(229, 64%, 46%)',\n  border: 'hsl(217, 16%, 45%)'\n}\n\nexport default palette\n","import palette from './palette'\n\nconst { primary, secondary, border, white, rock, paper, scissors, lizard, spock, stop } = palette\n\nconst colors = {\n  text: {\n    primary,\n    secondary,\n    border\n  },\n  components: {\n    button: {\n      color: white,\n      border: white,\n      hover: {\n        background: white,\n        color: stop\n      }\n    },\n    header: {\n      border\n    },\n    thumb: {\n      background: white,\n      shadow: '#00000038',\n      ROCK: rock[0],\n      PAPER: paper[0],\n      SCISSORS: scissors[0],\n      LIZARD: lizard[0],\n      SPOCK: spock[0]\n    },\n    modal: {\n      title: primary\n    }\n  }\n}\n\nexport default colors\n","import colors from './colors'\nimport palette from './palette'\n\nconst theme = { colors, palette }\n\nexport default theme\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from '@emotion/react'\n\nimport './index.css'\n\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport theme from './styles/theme'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n"],"sourceRoot":""}